[{"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/index.js":"1","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/reportWebVitals.js":"2","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/App.js":"3","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/OptionTable.js":"4","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/getWeb3.js":"5"},{"size":561,"mtime":1608486248232,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1608395041304,"results":"8","hashOfConfig":"7"},{"size":14555,"mtime":1609065358420,"results":"9","hashOfConfig":"7"},{"size":1823,"mtime":1608819415979,"results":"10","hashOfConfig":"7"},{"size":1214,"mtime":1609001270571,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1e630z9",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/index.js",[],["25","26"],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/reportWebVitals.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/App.js",["27","28"],"// class App.js v2.0 of Dec 26,2020\nimport React, { Component } from 'react';\t// from node.js module\nimport './App.css';                       // specific\nimport OptionTable from './OptionTable'; \t// specific\nimport Avatar from 'avataaars'; \t        // from node.js module\nimport { BounceLoader } from 'react-spinners'; \t// from node.js module\nimport getWeb3 from \"./getWeb3\";          // to call web3 API\nimport Pepito from \"./contracts_abi/Pepito.json\";                 // to call web3 API\nimport PepitoDisguise from \"./contracts_abi/PepitoDisguise.json\"; // to call web3 API \n\n/**\n * @author Vu Tien Khang - December 2020\n * @notice React root component for Pepito frontend\n * @dev disguise random options - done\n * @dev web3 calls - work in progress\n * @dev creating Pepito and PepitoDisguise - done\n * @dev calling functions in PepitoDisguise - to be done\n */\nclass App extends Component {\n\n  constructor() {\n    super()           // ES6 class constructors MUST call super if they are subclasses\n    this.state = {};\t// state holds variables of the component App\n    this.options = {\t// disguise options\n      topType: ['Eyepatch', 'Hat', 'Hijab', 'LongHairBigHair', 'LongHairBob', 'LongHairBun', 'LongHairCurly', 'LongHairCurvy', 'LongHairDreads', 'LongHairFrida', 'LongHairFro', 'LongHairFroBand', 'LongHairMiaWallace', 'LongHairNotTooLong', 'LongHairShavedSides', 'LongHairStraight', 'LongHairStraight2', 'LongHairStraightStrand', 'NoHair', 'ShortHairDreads01', 'ShortHairDreads02', 'ShortHairFrizzle', /*'ShortHairShaggy',*/ 'ShortHairShaggyMullet', 'ShortHairShortCurly', 'ShortHairShortFlat', 'ShortHairShortRound', 'ShortHairShortWaved', 'ShortHairSides', 'ShortHairTheCaesar', 'ShortHairTheCaesarSidePart', 'Turban', 'WinterHat1', 'WinterHat2', 'WinterHat3', 'WinterHat4'],\n      hatColor: ['Black', 'Blue01', 'Blue02', 'Blue03', 'Gray01', 'Gray02', 'Heather', 'PastelBlue', 'PastelGreen', 'PastelOrange', 'PastelRed', 'PastelYellow', 'Pink', 'Red', 'White'],\n      accessoriesType: ['Blank', 'Kurt', 'Prescription01', 'Prescription02', 'Round', 'Sunglasses', 'Wayfarers'],\n      hairColor: ['Auburn', 'Black', 'Blonde', 'BlondeGolden', 'Brown', 'BrownDark', 'PastelPink', 'Platinum', 'Red', 'SilverGray'],\n      facialHairType: ['BeardLight', 'BeardMagestic', 'BeardMedium', 'Blank', 'MoustacheFancy', 'MoustacheMagnum'],\n      facialHairColor: ['Auburn', 'Black', 'Brown', 'BrownGolden', 'brownBlack', 'Platinum', 'red'],\n      clotheType: ['BlazerShirt', 'BlazerSweater', 'CollarSweater', 'GraphicShirt', /*'Graphics',*/ 'Hoodie', 'Overall', 'ShirtCrewNeck', 'ShirtScoopNeck', 'ShirtVNeck'],\n      clotheColor: ['Black', 'Blue01', 'Blue02', 'Blue03', 'Gray01', 'Gray02', 'Heather', 'PastelBlue', 'PastelGreen', 'PastelOrange', 'PastelRed', 'PastelYellow', 'Pink', 'Red', 'White'],\n      eyeType: ['Close', 'Cry', 'Default', 'Dizzy', 'EyeRoll', 'Happy', 'Hearts', 'Side', 'Squint', 'Surprised', 'Wink', 'WinkWacky'],\n      eyebrowType: ['Angry', 'AngryNatural', 'Default', 'DefaultNatural', 'FlatNatural', 'FrownNatural', 'RaisedExcited', 'RaisedExcitedNatural', 'SadConcerned', 'SadConcernedNatural', 'UnibrowNatural', 'UpDown', 'UpDownNatural'],\n      mouthType: ['Concerned', 'Default', 'Disbelief','Eating', 'Grimace', 'Sad', 'ScreamOpen', 'Serious', 'Smile', 'Tongue', 'Twinkle', 'Vomit'],\n      skinColor: ['Tanned', 'Yellow', 'Pale', 'Light', 'Brown', 'DarkBrown', 'Black']\n    }\n    this.state.loading = false;                                 // for use in future testnet\n    this.state.web3Connect = false;\n    this.storeDisguise = this.storeDisguise.bind(this);         // make storeDisguise know of \"this\"\n    this.setRandomDisguise = this.setRandomDisguise.bind(this); // make setRandomDisguise know of \"this\"\n    this.makePepito = this.makePepito.bind(this);               // make makePepito know of \"this\"\n    this.setRandomDisguise();                                   // set random set of disguise options\n    this.makePepito();                                          // connect to blockchain, create instance of Pepito\n  }\n\n  state = { web3: null, accounts: null, contract: null, ownerPepito: null };          // to call web3 API\n\n  async makePepito() {\n  /**\n  * @notice connect web3 API and create Pepito contract\n  */\n    try {\n      /// @dev access to blockchain via Metamask\n      /// @dev get network provider and web3 instance by trying several channels \n      const web3 = await getWeb3();\n      //console.log(\"web3\", web3);\n      /// @dev use web3 to get the account of the user\n      const accounts = await web3.eth.getAccounts();\n\n      /// @dev create a Pepito singleton contract instance\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Pepito.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Pepito.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const ownerPepito = await instance.methods.owner().call();\n      var web3Connect = true;\n\n      /// @dev set web3, accounts, and contract to the state \n      this.setState({ web3, accounts, contract: instance, pepitoAddress: deployedNetwork.address, web3Connect, ownerPepito } \n        ,() => {\n          console.log(\"1.user account\", accounts,\n          \".\\n 1.makePepito().Pepito contract\", instance,\n          \".\\n  1.Pepito contract address\", this.state.pepitoAddress,\n          \".\\n   1.web3Connect\", web3Connect,\n          \".\\n    1.'owner' variable in Pepito\", ownerPepito);\n        });\n    } catch (error) {\n      /// @dev catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n\n  async componentDidMount() {\t//React hook that runs after the first render() lifecycle\n    /// @notice placeholder\n  };\n\n  /** @notice section copied from truffle react, to be ignored\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value, 5 by default.\n    await contract.methods.set(500).send({ from: accounts[0] });\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n  */ \n\n  async storeDisguise() {\n    /** \n    * @notice create a PepitoDisguise and store the options of this disguise\n    * @dev WIP - to be refined and tested\n    */\n    const { accounts, contract, web3Connect, ownerPepito } = this.state;\n    console.log(\"storeDisguise, user account\", accounts,\n      \".\\n 2.storeDisguise, Pepito contract\", contract,\n      \".\\n  2.storeDisguise, web3Connect\", web3Connect,\n      \".\\n   2.storeDisguise, 'owner' variable in Pepito\", ownerPepito);\n\n    if(web3Connect){\n      const pepitoDisguise = await contract.methods.createPepitoDisguise();\n      /// @dev bug to be changed: pepitoDisguise is currently a transaction object, not an address\n      console.log(\"instance pepitoDisguise created by Pepito\", pepitoDisguise);\n      var HatColor = 1;    //  test value, should be the rank in the array of HatColor\n      await pepitoDisguise.methods.setHatColor().call({ from: accounts[0] });\n      const storedDisguise = await pepitoDisguise.methods.storedDisguise().call();\n      console.log(\"storedDisguise\", storedDisguise);\n\n      /* \n      await pepitoDisguise.methods.setTopType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setHatColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setAccessoriesType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setHairColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setFacialHairType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setFacialHairColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setClotheType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setClotheColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setEyeType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setEyebrowType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setMouthType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setSkinColor().call({ from: accounts[0] });\n      */\n    } else alert(\"Please reload page first, to get connected to local blockchain\");\n  }\n\n  async getDisguise() {\n    /** \n    * @notice retrieve a PepitoDisguise and display it\n    * @dev to be done\n    */\n  }\n\n  render() {\n    /// @dev retrieve pepito disguise options from this.state\n    const {topType, hatColor, accessoriesType, hairColor, facialHairType, facialHairColor,\n      clotheType, clotheColor, eyeType, eyebrowType, mouthType, skinColor} = this.state;\n    return (\n      <div className=\"container text-center\">\n        {this.state.error ? \t// if error is true\n          <div className=\"alert alert-danger m-5\" role=\"alert\">\n            Please check if Metamask is enabled and connected to the correct network\n          </div>:<div></div>\t// if error is false\n        }\n        <header>\n          <h1 className=\"m-5\">Pepito Disguises <sup>on blockchain</sup></h1>\n        </header>\n        <div>\n          <table>\n            <tbody>\n              <tr>\n                <th rowSpan=\"3\"><img src=\"./machupicchu_logo.png\" alt=\"Machu-Picchu\" width=\"120\" height=\"120\" /></th>\n                <td><button className=\"btn btn-lg btn-secondary mb-5\" onClick={this.setRandomDisguise.bind(this)}>Generate random disguise</button></td>\n              </tr>\n              <tr>\n                <td><button className=\"btn btn-lg btn-secondary mb-5\" \n                onClick={this.storeDisguise.bind(this)}>Store disguise on blockchain (WIP - Reload page if crash)\n                </button></td>\n                <td>Pepito Address {this.state.pepitoAddress}</td>\n              </tr>\n              <tr>\n                <td><button className=\"btn btn-lg btn-secondary mb-5 disabled\" \n                onClick={this.getDisguise.bind(this)}>Retrieve disguise from blockchain: INACTIVE - WIP -\n                </button></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {this.state.loading ?\n          <div className=\"spinner\">\t{/* if loading is true, waiting for random response */}\n            <BounceLoader\n              color={'#6c757d'}\n              loading={this.state.loading}\n            />\n          </div>:\t// else no more waiting, random response is returned\n          <div className=\"avatar\">\n            <Avatar\n              style={{width: '400px', height: '400px'}}\n              avatarStyle='Circle'\n              topType={topType}\n              hatColor={hatColor}\n              accessoriesType={accessoriesType}\n              hairColor={hairColor}\n              facialHairType={facialHairType}\n              facialHairColor={facialHairColor}\n              clotheType={clotheType}\n              clotheColor={clotheColor}\n              eyeType={eyeType}\n              eyebrowType={eyebrowType}\n              mouthType={mouthType}\n              skinColor={skinColor}\n            />\n          </div>\n        }\n        {<OptionTable \n          topType={topType}\n          hatColor={hatColor}\n          accessoriesType={accessoriesType}\n          hairColor={hairColor}\n          facialHairType={facialHairType}\n          facialHairColor={facialHairColor}\n          clotheType={clotheType}\n          clotheColor={clotheColor}\n          eyeType={eyeType}\n          eyebrowType={eyebrowType}\n          mouthType={mouthType}\n          skinColor={skinColor}\n        />}\n      </div>\n    );\n  }\n\n  async setRandomDisguise() {\n    /** \n     * @notice generate pseudo random values of uint32, to retrieve random disguise options\n     * @dev not truly random but good enough for demo purposes\n    */\n    var getRandomValues = require(\"get-random-values\");\t/// @dev import JS random generator from npm\n    var array = new Uint32Array(1);\n    getRandomValues(array);           /// @dev fill array with random numbers\n    let randomBigNumber = array[0]; \t/// @dev use 1st random number in the array\n    this.setState({\n        loading: true,\n        randomBigNumber: randomBigNumber\t/// @dev random number for use directly by getData()\n    }\n    ,() => {\n      this.getData();                     /// @dev set random disguise options\n    });\n  }\n\n  async getData() {\n    /**\n     * @notice set the disguise options based on random number\n     */\n    let randomBigNumber = this.state.randomBigNumber;\t/// @dev read random number set in state by setRandomDisguise()\n    console.log(\"getData randomBigNumber\", randomBigNumber);\n    this.setState({   /// @dev random number --> position of the option in the array of options\n      topType: this.options.topType[randomBigNumber % Object.values(this.options.topType).length],\n      hatColor: this.options.hatColor[randomBigNumber % Object.values(this.options.hatColor).length],\n      accessoriesType: this.options.accessoriesType[randomBigNumber % Object.values(this.options.accessoriesType).length],\n      hairColor: this.options.hairColor[randomBigNumber % Object.values(this.options.hairColor).length],\n      facialHairType: this.options.facialHairType[randomBigNumber % Object.values(this.options.facialHairType).length],\n      facialHairColor: this.options.facialHairColor[randomBigNumber % Object.values(this.options.facialHairColor).length],\n      clotheType: this.options.clotheType[randomBigNumber % Object.values(this.options.clotheType).length],\n      clotheColor: this.options.clotheColor[randomBigNumber % Object.values(this.options.clotheColor).length],\n      eyeType: this.options.eyeType[randomBigNumber % Object.values(this.options.eyeType).length],\n      eyebrowType: this.options.eyebrowType[randomBigNumber % Object.values(this.options.eyebrowType).length],\n      mouthType: this.options.mouthType[randomBigNumber % Object.values(this.options.mouthType).length],\n      skinColor: this.options.skinColor[randomBigNumber % Object.values(this.options.skinColor).length],\n      loading: false\n    }\n    ,() => {\n      console.log(\"topType:\", this.state.topType, \", hatColor:\", this.state.hatColor, \", accessoriesType:\", this.state.accessoriesType);\n      console.log(\"hairColor:\", this.state.hairColor, \", facialHairType:\", this.state.facialHairType, \", clotheType:\", this.state.clotheType);\n      console.log(\"clotheColor:\", this.state.clotheColor, \", eyeType:\", this.state.eyeType, \", eyebrowType:\", this.state.eyebrowType);\n      console.log(\"mouthType:\", this.state.mouthType, \", skinColor:\", this.state.skinColor);\n    });    \n  }\n}\n\nexport default App;\n","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/OptionTable.js",["29"],"// class OptionTable\nimport React from \"react\";\n// import { render } from \"react-dom\";\nimport ReactTable from \"react-table-6\";   // in npm library\nimport \"react-table-6/react-table.css\";   // (!) to be analysed\n\nclass OptionTable extends React.Component {\n  constructor() {\n    super();\n  };\n\n  render() {\n    /** @dev retrieve pepito disguise options from props */\n    const data = [        // array = rows, array components = JSON key:value pairs\n        {component: \"topType\", option: this.props.topType},\n        {component: \"hatColor\", option: this.props.hatColor},\n        {component: \"accessoriesType\", option: this.props.accessoriesType},\n        {component: \"hairColor\", option: this.props.hairColor},\n        {component: \"facialHairType\", option: this.props.facialHairType},\n        {component: \"clotheType\", option: this.props.clotheType},\n        {component: \"clotheColor\", option: this.props.clotheColor},\n        {component: \"eyeType\", option: this.props.eyeType},\n        {component: \"eyebrowType\", option: this.props.eyebrowType},\n        {component: \"mouthType\", option: this.props.mouthType},\n        {component: \"skinColor\", option: this.props.skinColor},\n    ];\n    const columns = [       // our table has 2 columns\n        {Header: \"AvatarComponent\", accessor: \"component\"},  // Header is any string, accessor matches the JSON key\n        {Header: \"Option\", accessor: \"option\"}              // a dropdown menu to select an option of the component\n    ];\n    return (\n      <div>\n        <ReactTable                // ReactTable is a component \n          data={data}              // props for ReactTable\n          columns={columns}        // props for ReactTable\n          defaultPageSize={12}\n          className=\"-striped -highlight\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default OptionTable;\n","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/getWeb3.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":9,"column":8,"nodeType":"36","messageId":"37","endLine":9,"endColumn":22},{"ruleId":"34","severity":1,"message":"38","line":119,"column":11,"nodeType":"36","messageId":"37","endLine":119,"endColumn":19},{"ruleId":"39","severity":1,"message":"40","line":8,"column":3,"nodeType":"41","messageId":"42","endLine":10,"endColumn":4},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'PepitoDisguise' is defined but never used.","Identifier","unusedVar","'HatColor' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]