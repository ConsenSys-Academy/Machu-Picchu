[{"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/index.js":"1","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/reportWebVitals.js":"2","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/App.js":"3","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/OptionTable.js":"4","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/getWeb3.js":"5","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/helpers.js":"6"},{"size":561,"mtime":1608486248232,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608395041304,"results":"9","hashOfConfig":"8"},{"size":15917,"mtime":1609415340297,"results":"10","hashOfConfig":"8"},{"size":1823,"mtime":1608819415979,"results":"11","hashOfConfig":"8"},{"size":1214,"mtime":1609001270571,"results":"12","hashOfConfig":"8"},{"size":8274,"mtime":1609409183351,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1e630z9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/index.js",[],["29","30"],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/reportWebVitals.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/App.js",["31","32"],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/OptionTable.js",["33"],"// class OptionTable\nimport React from \"react\";\n// import { render } from \"react-dom\";\nimport ReactTable from \"react-table-6\";   // in npm library\nimport \"react-table-6/react-table.css\";   // (!) to be analysed\n\nclass OptionTable extends React.Component {\n  constructor() {\n    super();\n  };\n\n  render() {\n    /** @dev retrieve pepito disguise options from props */\n    const data = [        // array = rows, array components = JSON key:value pairs\n        {component: \"topType\", option: this.props.topType},\n        {component: \"hatColor\", option: this.props.hatColor},\n        {component: \"accessoriesType\", option: this.props.accessoriesType},\n        {component: \"hairColor\", option: this.props.hairColor},\n        {component: \"facialHairType\", option: this.props.facialHairType},\n        {component: \"clotheType\", option: this.props.clotheType},\n        {component: \"clotheColor\", option: this.props.clotheColor},\n        {component: \"eyeType\", option: this.props.eyeType},\n        {component: \"eyebrowType\", option: this.props.eyebrowType},\n        {component: \"mouthType\", option: this.props.mouthType},\n        {component: \"skinColor\", option: this.props.skinColor},\n    ];\n    const columns = [       // our table has 2 columns\n        {Header: \"AvatarComponent\", accessor: \"component\"},  // Header is any string, accessor matches the JSON key\n        {Header: \"Option\", accessor: \"option\"}              // a dropdown menu to select an option of the component\n    ];\n    return (\n      <div>\n        <ReactTable                // ReactTable is a component \n          data={data}              // props for ReactTable\n          columns={columns}        // props for ReactTable\n          defaultPageSize={12}\n          className=\"-striped -highlight\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default OptionTable;\n","/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/getWeb3.js",[],"/Users/kvutien/Dropbox/MachuPicchu/Machu-Picchu/Pepito/client/src/helpers.js",["34"],"// helper JavaScript functions of Dec 31, 2020\n// - under test, calling setState directly (incorrect design and doesn't work). \n// Not integrated yet with App.js\nimport getWeb3 from \"./getWeb3\";          // to call web3 API\nimport Pepito from \"./contracts_abi/Pepito.json\";                 // to call web3 API\n\nexport function tryIt () {\n    /**\n    * @notice simple trial helper functions for App.js\n    * @dev clean design: returns an object that App.js will insert in this.state\n    * @dev the text will be displayed in the button \"Generate disguise\"\n    * @dev tested and validated Dec 31 \n    */\n    return {myWord: ', please!'};\n}\n\n\nexport function getRandomDisguise(options) {\n    /** \n     * @notice set & return the disguise options based on random number\n     * @dev generate pseudo random values of uint32, to retrieve random disguise options\n     * @dev not truly random but good enough for demo purposes\n     * @dev tested and validated Dec 30\n    */\n    const getRandomValues = require(\"../node_modules/get-random-values\");\t/// @dev import JS random generator from npm\n    const array = new Uint32Array(1);\n    getRandomValues(array);               /// @dev fill array with random numbers\n    const randomBigNumber = array[0];     /// @dev use 1st random number in the array\n    /** @dev transform the random into ranks in the arrays */\n    const idxTopType = randomBigNumber % Object.values(options.topType).length;\n    const idxHatColor = randomBigNumber % Object.values(options.hatColor).length;\n    const idxAccessoriesType = randomBigNumber % Object.values(options.accessoriesType).length;\n    const idxHairColor = randomBigNumber % Object.values(options.hairColor).length;\n    const idxFacialHairType = randomBigNumber % Object.values(options.facialHairType).length;\n    const idxfacialHairColor = randomBigNumber % Object.values(options.facialHairColor).length;\n    const idxClotheType = randomBigNumber % Object.values(options.clotheType).length;\n    const idxClotheColor = randomBigNumber % Object.values(options.clotheColor).length;\n    const idxEyeType = randomBigNumber % Object.values(options.eyeType).length;\n    const idxEyebrowType = randomBigNumber % Object.values(options.eyebrowType).length;\n    const idxMouthType = randomBigNumber % Object.values(options.mouthType).length;\n    const idxSkinColor = randomBigNumber % Object.values(options.skinColor).length;\n\n    const disguise = {\n        randomBigNumber: randomBigNumber,\t/// @dev random number for use directly by getData()\n        idxTopType: idxTopType,\n        topType: options.topType[idxTopType],\n        idxHatColor: idxHatColor,\n        hatColor: options.hatColor[idxHatColor],\n        idxAccessoriesType: idxAccessoriesType,\n        accessoriesType: options.accessoriesType[idxAccessoriesType],\n        idxHairColor: idxHairColor,\n        hairColor: options.hairColor[idxHairColor],\n        idxFacialHairType: idxFacialHairType,\n        facialHairType: options.facialHairType[idxFacialHairType],\n        idxfacialHairColor: idxfacialHairColor,\n        facialHairColor: options.facialHairColor[idxfacialHairColor],\n        idxClotheType: idxClotheType,\n        clotheType: options.clotheType[idxClotheType],\n        idxClotheColor:idxClotheColor,\n        clotheColor: options.clotheColor[idxClotheColor],\n        idxEyeType: idxEyeType,\n        eyeType: options.eyeType[idxEyeType],\n        idxEyebrowType: idxEyebrowType,\n        eyebrowType: options.eyebrowType[idxEyebrowType],\n        idxMouthType: idxMouthType,\n        mouthType: options.mouthType[idxMouthType],\n        idxSkinColor: idxSkinColor,\n        skinColor: options.skinColor[idxSkinColor],\n    }\n    console.log(\"setRandomDisguise randomBigNumber\", randomBigNumber);\n    console.log(\"topType:\", disguise.topType, \", hatColor:\", disguise.hatColor, \", accessoriesType:\", disguise.accessoriesType);\n    console.log(\"clotheColor:\", disguise.clotheColor, \", eyeType:\", disguise.eyeType, \", eyebrowType:\", disguise.eyebrowType);\n    console.log(\"hairColor:\", disguise.hairColor, \", facialHairType:\", disguise.facialHairType, \", clotheType:\", disguise.clotheType);\n    console.log(\"mouthType:\", disguise.mouthType, \", skinColor:\", disguise.skinColor);\n    console.log(\"disguise\", disguise)\n    return disguise;\n}\n\nexport const makePepito = async () => {\n    /**\n     * @notice connect web3 API and create Pepito contract\n     * @dev not yet validated\n    */\n    try {\n        /// @dev access to blockchain via Metamask\n        /// @dev get network provider and web3 instance by trying several channels \n        const web3 = await getWeb3();\n        /// @dev ***** TODO: check error when getWeb3 returns, in case Matamask not connected\n        /// @dev use web3 to get the account of the user\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"0.user account\", accounts);\n  \n        /// @dev create a Pepito singleton contract instance\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Pepito.networks[networkId];\n        const pepitoInstance = new web3.eth.Contract(\n          Pepito.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        const ownerPepito = await pepitoInstance.methods.owner().call();\n        var web3Connect = true;\n  \n        /// @dev set web3, accounts, and contract to the state \n        const web3Pepito = { web3, accounts, contract: pepitoInstance, pepitoAddress: deployedNetwork.address, web3Connect, ownerPepito } \n        console.log(\"1.user account\", web3Pepito.accounts,\n            \".\\n 3.makePepito().Pepito contract\", web3Pepito.contract,\n            \".\\n  3.Pepito contract address\", web3Pepito.pepitoAddress,\n            \".\\n   3.web3Connect\", web3Pepito.web3Connect,\n            \".\\n    3.'owner' variable in Pepito\", web3Pepito.ownerPepito);\n        return web3Pepito;\n    } catch (error) {\n        /// @dev catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n    }\n}\n\nexport const storeDisguise = async () => {\n    /** \n    * @notice create a PepitoDisguise and store the options of this disguise\n    * @dev WIP - to be refined and tested in App.js before transferring here in helpers.js\n    */\n    const { accounts, contract, web3Connect, ownerPepito } = this.state;\n    console.log(\"storeDisguise, user account\", accounts,\n      \".\\n 2.storeDisguise, Pepito contract\", contract,\n      \".\\n  2.storeDisguise, web3Connect\", web3Connect,\n      \".\\n   2.storeDisguise, 'owner' variable in Pepito\", ownerPepito);\n\n    if(web3Connect){\n      const pepitoDisguise = await contract.methods.createPepitoDisguise();\n      /// @dev bug to be changed: pepitoDisguise is currently a transaction object, not an address\n      console.log(\"instance pepitoDisguise created by Pepito\", pepitoDisguise);\n      var HatColor = 1;    //  test value, should be the rank in the array of HatColor\n      await pepitoDisguise.methods.setHatColor().call({ from: accounts[0] });\n      const storedDisguise = await pepitoDisguise.methods.storedDisguise().call();\n      console.log(\"storedDisguise\", storedDisguise);\n\n      /* \n      await pepitoDisguise.methods.setTopType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setHatColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setAccessoriesType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setHairColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setFacialHairType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setFacialHairColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setClotheType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setClotheColor().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setEyeType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setEyebrowType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setMouthType().call({ from: accounts[0] });\n      await pepitoDisguise.methods.setSkinColor().call({ from: accounts[0] });\n      */\n    } else alert(\"Please reload page first, to get connected to local blockchain\");\n}\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":7,"column":8,"nodeType":"41","messageId":"42","endLine":7,"endColumn":22},{"ruleId":"39","severity":1,"message":"43","line":128,"column":11,"nodeType":"41","messageId":"42","endLine":128,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":8,"column":3,"nodeType":"46","messageId":"47","endLine":10,"endColumn":4},{"ruleId":"39","severity":1,"message":"43","line":135,"column":11,"nodeType":"41","messageId":"42","endLine":135,"endColumn":19},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'PepitoDisguise' is defined but never used.","Identifier","unusedVar","'HatColor' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]